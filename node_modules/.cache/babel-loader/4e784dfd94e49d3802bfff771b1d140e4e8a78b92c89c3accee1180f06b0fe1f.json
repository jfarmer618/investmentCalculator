{"ast":null,"code":"// This function expects a JS object as an argument\n// The object should contain the following properties\n// - initialInvestment: The initial investment amount\n// - annualInvestment: The amount invested every year\n// - expectedReturn: The expected (annual) rate of return\n// - duration: The investment duration (time frame)\nexport function calculateInvestmentResults(_ref){let{initialInvestment,annualInvestment,expectedReturn,duration}=_ref;const annualData=[];let investmentValue=initialInvestment;for(let i=0;i<duration;i++){const interestEarnedInYear=investmentValue*(expectedReturn/100);investmentValue+=interestEarnedInYear+annualInvestment;annualData.push({year:i+1,// year identifier\ninterest:interestEarnedInYear,// the amount of interest earned in this year\nvalueEndOfYear:investmentValue,// investment value at end of year\nannualInvestment:annualInvestment// investment added in this year\n});}return annualData;}// The browser-provided Intl API is used to prepare a formatter object\n// This object offers a \"format()\" method that can be used to format numbers as currency\n// Example Usage: formatter.format(1000) => yields \"$1,000\"\nexport const formatter=new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',minimumFractionDigits:0,maximumFractionDigits:0});","map":{"version":3,"names":["calculateInvestmentResults","_ref","initialInvestment","annualInvestment","expectedReturn","duration","annualData","investmentValue","i","interestEarnedInYear","push","year","interest","valueEndOfYear","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits"],"sources":["/Users/jfarm618/React/Investment Calculator/src/util/investment.js"],"sourcesContent":["// This function expects a JS object as an argument\n// The object should contain the following properties\n// - initialInvestment: The initial investment amount\n// - annualInvestment: The amount invested every year\n// - expectedReturn: The expected (annual) rate of return\n// - duration: The investment duration (time frame)\n\nexport function calculateInvestmentResults({\n  initialInvestment,\n  annualInvestment,\n  expectedReturn,\n  duration,\n}) {\n  const annualData = [];\n  let investmentValue = initialInvestment;\n\n  for (let i = 0; i < duration; i++) {\n    const interestEarnedInYear = investmentValue * (expectedReturn / 100);\n    investmentValue += interestEarnedInYear + annualInvestment;\n    annualData.push({\n      year: i + 1, // year identifier\n      interest: interestEarnedInYear, // the amount of interest earned in this year\n      valueEndOfYear: investmentValue, // investment value at end of year\n      annualInvestment: annualInvestment, // investment added in this year\n    });\n  }\n\n  return annualData;\n}\n\n// The browser-provided Intl API is used to prepare a formatter object\n// This object offers a \"format()\" method that can be used to format numbers as currency\n// Example Usage: formatter.format(1000) => yields \"$1,000\"\nexport const formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0,\n});\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,SAAS,CAAAA,0BAA0BA,CAAAC,IAAA,CAKvC,IALwC,CACzCC,iBAAiB,CACjBC,gBAAgB,CAChBC,cAAc,CACdC,QACF,CAAC,CAAAJ,IAAA,CACC,KAAM,CAAAK,UAAU,CAAG,EAAE,CACrB,GAAI,CAAAC,eAAe,CAAGL,iBAAiB,CAEvC,IAAK,GAAI,CAAAM,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,QAAQ,CAAEG,CAAC,EAAE,CAAE,CACjC,KAAM,CAAAC,oBAAoB,CAAGF,eAAe,EAAIH,cAAc,CAAG,GAAG,CAAC,CACrEG,eAAe,EAAIE,oBAAoB,CAAGN,gBAAgB,CAC1DG,UAAU,CAACI,IAAI,CAAC,CACdC,IAAI,CAAEH,CAAC,CAAG,CAAC,CAAE;AACbI,QAAQ,CAAEH,oBAAoB,CAAE;AAChCI,cAAc,CAAEN,eAAe,CAAE;AACjCJ,gBAAgB,CAAEA,gBAAkB;AACtC,CAAC,CAAC,CACJ,CAEA,MAAO,CAAAG,UAAU,CACnB,CAEA;AACA;AACA;AACA,MAAO,MAAM,CAAAQ,SAAS,CAAG,GAAI,CAAAC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAE,CACtDC,KAAK,CAAE,UAAU,CACjBC,QAAQ,CAAE,KAAK,CACfC,qBAAqB,CAAE,CAAC,CACxBC,qBAAqB,CAAE,CACzB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}